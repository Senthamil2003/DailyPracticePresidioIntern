// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RequestTrackerModelLibrary;

#nullable disable

namespace RequestTrackerModelLibrary.Migrations
{
    [DbContext(typeof(RequestTrackerContext))]
    [Migration("20240511084923_requestchanges")]
    partial class requestchanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RequestTrackerModelLibrary.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RequestTrackerModelLibrary.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("SolutionId")
                        .HasColumnType("int");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SolutionId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("RequestTrackerModelLibrary.Request", b =>
                {
                    b.Property<int>("RequestNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestNumber"), 1L, 1);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ProblemStatus")
                        .HasColumnType("bit");

                    b.Property<int>("RequestClosedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestRaisedBy")
                        .HasColumnType("int");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestNumber");

                    b.HasIndex("RequestClosedBy");

                    b.HasIndex("RequestRaisedBy");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("RequestTrackerModelLibrary.Solution", b =>
                {
                    b.Property<int>("SolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SolutionId"), 1L, 1);

                    b.Property<int>("AnsweredEmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsWorked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RaisedRequestId")
                        .HasColumnType("int");

                    b.Property<string>("RaiserComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolutionId");

                    b.HasIndex("AnsweredEmployeeId");

                    b.HasIndex("RaisedRequestId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("RequestTrackerModelLibrary.Feedback", b =>
                {
                    b.HasOne("RequestTrackerModelLibrary.Employee", "Employee")
                        .WithMany("GivenFeedbacks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestTrackerModelLibrary.Solution", "Solution")
                        .WithMany("Feedbacks")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("RequestTrackerModelLibrary.Request", b =>
                {
                    b.HasOne("RequestTrackerModelLibrary.Employee", "ClosedByEmployee")
                        .WithMany("ClosedRequest")
                        .HasForeignKey("RequestClosedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestTrackerModelLibrary.Employee", "RaisedByEmployee")
                        .WithMany("RaisedRequests")
                        .HasForeignKey("RequestRaisedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClosedByEmployee");

                    b.Navigation("RaisedByEmployee");
                });

            modelBuilder.Entity("RequestTrackerModelLibrary.Solution", b =>
                {
                    b.HasOne("RequestTrackerModelLibrary.Employee", "AnsweredEmployee")
                        .WithMany("GivenSolutions")
                        .HasForeignKey("AnsweredEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestTrackerModelLibrary.Request", "RaisedRequest")
                        .WithMany("solutions")
                        .HasForeignKey("RaisedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnsweredEmployee");

                    b.Navigation("RaisedRequest");
                });

            modelBuilder.Entity("RequestTrackerModelLibrary.Employee", b =>
                {
                    b.Navigation("ClosedRequest");

                    b.Navigation("GivenFeedbacks");

                    b.Navigation("GivenSolutions");

                    b.Navigation("RaisedRequests");
                });

            modelBuilder.Entity("RequestTrackerModelLibrary.Request", b =>
                {
                    b.Navigation("solutions");
                });

            modelBuilder.Entity("RequestTrackerModelLibrary.Solution", b =>
                {
                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
